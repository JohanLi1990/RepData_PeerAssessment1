library("rpart", lib.loc="/usr/lib/R/library")
library("splines", lib.loc="/usr/lib/R/library")
library("parallel", lib.loc="/usr/lib/R/library")
install.packages("slidify")
library(ggplot2)
installed.packages("ggplot1")
installed.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages(plyr)
install.packages("plyr")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(te)
install.packages("curl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
x<-1
x
msg<- "hello"
msg
x<- 5## comments to the e
x
print(x)
x<-1:20
x
x[2]
[]5
x<-char(5)
attributes(x)
attributes(5)
x = c(1, 2, 3)
x[1]
x(1)
attributes(x)
attributes(obj = char)
attributes(obj = x)
attributes(obj)
attributes(msg)
x<-vector("numeric", 10)
x
x<-c(1.7, "a")
x
x<-c(True, 2)
x<-c(TRUE, 2)
x
x<-c("a", TRUE)
x
x<-0:6
class(x)
as.numeric(x)
x
as.logical(x)
as.character(x)
x
x<-c("a", "b","v")
x
as
m<-1:10
m
dim(m)<-c(2,5)
m
dim(n)<-c(5,2)
dim(m)<-c(5,2)
m
x<-1:3
y<-10:12
a = cbind(x,y)
a
b = rbind(x,y)
b
x<- factor(c("yes", "yes", "no"))
x
table(x)
unclass(x)
nan(X)
nan()
x<-Nan
x <- NaN
x
x <-1
x
x <- c(1,2,NA, 10, 4)
x
is.na((x))
is.na(x)
## vector of true indicate where missing value is
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
names(x)
x <- list(a =1 , b = 2, c= 3)
x
m <-matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "n"), c("e", "f"))
m
y <- data.frame(a = 1, b = "a")
dput(y)
con <- url("http://www.hoopchina.com", "r")
x <- readLines(con)
head(x)
p(x)
body(x)
c <- matrix(1:6, 2, 3)
c
x[1,2]
c[1,2]
x <- list(aardvark = 1:5)
x
x$aardvark
x$a
y <- list(aardvark =1:3, bread = 2:4)
y$b
y$aardvark
x <- c(1, 2, NA, 3, NA, 5)
bad <- is.na(x)
bad
x[!bad]
help("complete.cases")
x <- c(1, 2, NA, 4, NA, 5)
x <- c("a", "b", NA, "d", NA, "f")
y <- c(1, 2, NA, 4, NA, 5)
y <- c(1, 2, 3, 4, NA, 5)
good <- complete.cases(x, y)
good
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
good
factor <- gl(3, 10)
length(factor)
factor(3)
library(swirl)
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
load("~/Documents/DataScienceCoursera/.RData")
dev.vec
?dev
dev
png()
?lines
?plot
Hh_pow <- read.table("household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/Explore_DA/household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/Documents/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE)
View(Hh_pow)
Hh_pow <- read.table("~/Documents/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE, sep = ";")
graphics.off()
sample(1:100, size = 40, replace = FALSE)
library(plyr)
library(dplyr)
heat.colors()
help("heat.colors")
heat.colors(10)
image(heat.colors(10))
c1 <- c(10, 10)
c1
c1 <- c(c1, c(2, 4))
c1
image(c1)
c1 <- c(c1, c1)
c1
m1 <- matrix(c1, nrow = 2, ncol = 4)
m1
image(m1)
f1 <- volcano
image(f1)
Pal <- colorRampPalette(c("red", "blue"))
Pal(1)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRamp(cols)
image(volcano, col = pal(20))
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image(volcano, col = pal(10))
help(dnorm)
library(ggplot2)
xvals <- seq(-10, 10, by = .01)
dat <- data.frame(
y = c(
dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)
),
x = rep(xvals, 4),
factor = factor(rep(1 : 4, rep(length(xvals), 4)))
)
ggplot(dat, aes(x = x, y = y, color = factor)) + geom_line(size = 2)
library(ggplot2)
nosim <- 10000;
dat <- data.frame(
x = c(apply(matrix(rnorm(nosim * 10), nosim), 1, var),
apply(matrix(rnorm(nosim * 20), nosim), 1, var),
apply(matrix(rnorm(nosim * 30), nosim), 1, var)),
n = factor(rep(c("10", "20", "30"), c(nosim, nosim, nosim)))
)
ggplot(dat, aes(x = x, fill = n)) + geom_density(size = 2, alpha = .2) + geom_vline(xintercept = 1, size = 2)
var
help(a"apply")
help("apply")
a1 <- matrix(rnorm(10*10), 10)
a1
help("matrix")
help("ggplot")
help("var")
var(a1)
tt1 <- apply(a1, 1, var)
tt1
help("data.frame")
size1 <- factor(rep(c(10, 20, 30)))
size1
help(rep)
rep(c(10, 20, 30), rep(10, 3))
rep(10, 3)
var(1:10)
install.packages("UsingR")
library(UsingR)
dataset(father.son)
data(father.son)
x <- father.son$sheight
n <- length(x)
plot(x)
hist(x)
qnorm(0.95, 1100, 75)
qnorm(0.95, 1100, 7.5)
pbinom(3, 5, 0.5)
?binom
?pbinom
pbinom(3, 5, 0.5, lower.tail = FALSE)
ppois(10, 15)
?ppois
setwd("~/Documents/RepData_PeerAssessment1")
load("~/Documents/RepData_PeerAssessment1/.RData")
act_file_2 <- group_by(act_file, interval)
act_summary_2 <- summarize(act_file_2, Total_step = mean(steps, na.rm = TRUE))
plot(act_summary_2$interval, act_summary_2$Total_step, type = "l")
library(dplyr)
library(graphics)
act_file_2 <- group_by(act_file, interval)
act_summary_2 <- summarize(act_file_2, Total_step = mean(steps, na.rm = TRUE))
plot(act_summary_2$interval, act_summary_2$Total_step, type = "l")
View(act_summary_2)
max_step <- max(act_summary_2$Total_step)
index_step <- grep(max_step, act_summary_2$Total_step)
print(act_summary_2$interval[index_step])
?complete.cases
a1 <- complete.cases(act_file)
a1
act_file[278, ]
check_cases <- complete.cases(act_file)
no_of_missing <- length(check_cases == FALSE)
cat("The number of missing values is ", no_of_missing)
check_cases
a1 < check_cases == FALSE
a1 <- check_cases == FALSE
a1
str(check_cases)
a1 <- check_cases[check_cases == FALSE]
a1
check_cases <- complete.cases(act_file)
no_of_missing <- length(check_cases[check_cases == FALSE])
cat("The number of missing values is ", no_of_missing)
check_cases <- complete.cases(act_file)
no_of_missing <- length(check_cases[check_cases == FALSE])
cat("The number of missing values is", no_of_missing)
a1 <- act_file$steps[act_file$steps == NA]
a1 <- act_file$steps[act_file$steps == NA,]
a1 <- act_file$steps[act_file$steps == NA]
a1
a1 <- act_file$steps[act_file$steps == NULL]
act_file$steps == NA
act_file$steps[is.na(act_file$steps)]
a1 <- act_file$steps[is.na(act_file$steps)]
!check_cases
act_file$steps[!check_cases, ] [2]
act_file$steps[!check_cases] [2]
act_file_3 <- act_file
act_file$steps[!check_cases] [1] <- act_summary_2$Total_step[act_summary_2$interval == act_file_3$interval]
library(dplyr)
library(graphics)
act_file <- read.csv("activity.csv", na.strings = "NA")
act_file$date <- as.Date(as.character(act_file$date), format = "%Y-%m-%d")
act_file_1 <- group_by(act_file, date)
act_summary <- summarize(act_file_1, Total_step = sum(steps, na.rm = TRUE))
cat("The median is ", median(act_summary$Total_step))
cat("The mean is ", mean(act_summary$Total_step))
library(ggplot2)
ggplot(data = act_summary, aes(Total_step)) + geom_histogram()
act_file_2 <- group_by(act_file, interval)
act_summary_2 <- summarize(act_file_2, Total_step = mean(steps, na.rm = TRUE))
plot(act_summary_2$interval, act_summary_2$Total_step, type = "l",
xlab = "intervals", ylab = "total step averaged across all days",
main = "Time series plot for intervals in 60 days")
max_step <- max(act_summary_2$Total_step)
index_step <- grep(max_step, act_summary_2$Total_step)
print(act_summary_2$interval[index_step])
check_cases <- complete.cases(act_file)
no_of_missing <- length(check_cases[check_cases == FALSE])
cat("The number of missing values is", no_of_missing)
act_file$steps[!check_cases] [i]
act_file$steps[!check_cases] [1]
act_summary_2$Total_step[act_summary_2$interval == act_file$interval]
act_summary_2$Total_step[act_summary_2$interval == act_file$interval[1]]
act_file$interval[!check_cases][1]
act_file$interval[!check_cases][2]
act_file$interval[!check_cases][300]
act_file$interval[!check_cases][498]
act_file_3 <- act_file
for (i in 1:no_of_missing) {
act_file_3$steps[!check_cases] [i] <-
act_summary_2$Total_step[act_summary_2$interval == act_file_3$interval[!check_cases][i]]
}
print(is.na(act_file_3$steps))
View(act_file_3)
View(act_file)
